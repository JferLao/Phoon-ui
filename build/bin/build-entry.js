/* 根据components.json文件，生成src/index.js文件 */
var Components = require("../../components.json");
var fs = require("fs");
var render = require("json-templater/string");  //模板解析
var uppercamelcase = require("uppercamelcase"); //驼峰转大小写
var path = require("path");
var endOfLine = require("os").EOL;  //\r\n

var OUTPUT_PATH = path.join(__dirname, "../../src/index.js");
var IMPORT_TEMPLATE =
  "import {{name}} from '../packages/{{package}}/index.js';";
var INSTALL_COMPONENT_TEMPLATE = " {{name}}";
var MAIN_TEMPLATE = `/* Automatically generated by './build/bin/build-entry.js' */

const install = function(Vue, opts = {}){
    locale.i18n(opts.i18n);

    components.forEach(component => {
        Vue.component(component.name,component);
    });
};

    if(typeof window !== 'undefined' && window.Vue){
            install(window.Vue)
        }
        
        // 导出版本号、Install方法（插件）和一些功能
        export default {
            version:'{{version}}',
            install,
            {{list}}
        };

`;

// delete Components.font

var ComponentNames = Object.keys(Components);

var includeComponentTemplate = [];
var installTemplate = [];
var listTemplate = [];

ComponentNames.forEach(name=> {
    var componentName = uppercamelcase(name);
    // 解析模板生成引入语句
    includeComponentTemplate.push(render(IMPORT_TEMPLATE,{
        name:componentName,
        package:name
    }))

    if(['Loading', 'MessageBox', 'Notification', 'Message', 'InfiniteScroll'].indexOf(componentName)=== - 1){
        installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE,{
            name:componentName,
            component:name
        }));
    }

    if(componentName !== 'Loading') listTemplate.push(` ${componentName}`);
})

var template = render(MAIN_TEMPLATE,{
    include :includeComponentTemplate.join(endOfLine),
    install :installTemplate.join(','+endOfLine),
    version:process.env.VERSION || require('../../package.json').version,
    list:listTemplate.join(',' + endOfLine)
});

// 自动生成入口文件
fs.writeFileSync(OUTPUT_PATH,template);
console.log('[build entry] DONE:', OUTPUT_PATH)



